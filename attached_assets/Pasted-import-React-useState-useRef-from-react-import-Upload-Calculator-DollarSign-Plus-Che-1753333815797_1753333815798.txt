import React, { useState, useRef } from 'react';
import { Upload, Calculator, DollarSign, Plus, Check, Trash2 } from 'lucide-react';
import * as XLSX from 'xlsx';

/**
 * APLICAȚIE TRANSPORT CU EVIDENȚA PLĂȚILOR
 * 
 * FUNCȚIONALITĂȚI EXISTENTE (NU MODIFICA LOGICA):
 * 1. Încărcare fișiere: TRIP (CSV), Facturi 7/30 zile (Excel/CSV)
 * 2. Maparea șoferilor la companii (logică complexă - NU MODIFICA!)
 * 3. Calculul comisioanelor (2% Fast Express, 4% restul)
 * 4. Evidența plăților organizată pe săptămâni (duminică-sâmbătă)
 * 5. Calendar pentru ultimii 2 ani
 * 6. Progres bar și tracking plăți
 * 
 * ÎMBUNĂTĂȚIRI CERUTE:
 * - Design modern și profesional
 * - Animații și tranziții fluide
 * - UI/UX de top (dark mode, glassmorphism, micro-animații)
 * - Componente interactive și responsive
 * - Culori vibrante și tipografie modernă
 * - Keep ALL existing functionality and logic intact!
 */

const TransportPaymentApp = () => {
  // ===== STATE MANAGEMENT (NU MODIFICA) =====
  const [tripData, setTripData] = useState(null);
  const [invoice7Data, setInvoice7Data] = useState(null);
  const [invoice30Data, setInvoice30Data] = useState(null);
  const [processedData, setProcessedData] = useState({});
  const [payments, setPayments] = useState({});
  const [paymentHistory, setPaymentHistory] = useState([]);
  const [activeTab, setActiveTab] = useState('upload');
  const [loading, setLoading] = useState(false);
  const [selectedWeek, setSelectedWeek] = useState('');
  const [processingWeek, setProcessingWeek] = useState('');
  const [showCalendar, setShowCalendar] = useState(false);
  const [calendarDate, setCalendarDate] = useState(new Date());
  
  const tripFileRef = useRef();
  const invoice7FileRef = useRef();
  const invoice30FileRef = useRef();

  // ===== MAPAREA ȘOFERILOR (NU MODIFICA ACEASTĂ LOGICĂ!) =====
  const DRIVER_COMPANY_MAP_ORIGINAL = {
    "ADRIAN  MIRON": "Fast Express",
    "Adrian miron": "Fast Express",
    "Andrei Serban Badea": "Fast Express",
    "Petrisor Besteala": "Fast Express",
    "Georgian Florentin Moise": "Fast Express",
    "Gabriel Marian Ivan": "Fast Express",
    "Olteanu Ionut": "Fast Express",
    "Marius Condila": "Fast Express",
    "Teodor Petrișor Chiar": "Fast Express",
    "Tiberiu Iulian  Ivan": "Fast Express",
    "Marius Adrian Badea": "Fast Express",
    "Florin Oprea": "Fast Express",
    "George Mihaita Butnaru": "Fast Express",
    "Dan Costinel Savu": "Fast Express",
    "Iosip Ionel": "Fast Express",
    "Andrei Tanase": "Fast Express",
    "Pana Stefan Daniel": "Fast Express",
    "Vasilică Roman": "Fast Express",
    "Florin Nicolae Sanislai": "Fast Express",
    "Costica Mihalcea": "Daniel Ontheroad",
    "Adrian Budescu": "Daniel Ontheroad",
    "Danut Feleaga": "Daniel Ontheroad",
    "Razvan Jurubita": "Daniel Ontheroad",
    "Feleagă Marian": "Daniel Ontheroad",
    "Dimitrov F": "Daniel Ontheroad",
    "Cernat Lucian Marian": "DE Cargo Speed",
    "Draghici Marius Sorin": "DE Cargo Speed",
    "Sorin petrisor Dumitrache": "DE Cargo Speed",
    "Petre Iulian LEUCE": "DE Cargo Speed",
    "Gorgos Adrian": "Stef Trans",
    "Barbuceanu Anghel": "Stef Trans",
    "Adi-Nicolae Gocea": "Stef Trans",
    "Dumitru Ciobanu": "Stef Trans",
    "Dimache Mihalache": "Stef Trans",
    "Toma Alin Marian": "Bis General",
    "Balanean Daniel": "Bis General"
  };

  // Generez toate variantele de nume (NU MODIFICA ACEASTĂ LOGICĂ!)
  const generateNameVariants = (name) => {
    const cleaned = name.trim().replace(/\s+/g, ' ');
    const variants = [cleaned.toLowerCase()];
    
    const parts = cleaned.split(' ');
    if (parts.length > 1) {
      const reversed = [...parts].reverse();
      variants.push(reversed.join(' ').toLowerCase());
      
      if (parts.length >= 3) {
        const [first, ...rest] = parts;
        const restReversed = [...rest].reverse();
        variants.push(`${first.toLowerCase()} ${restReversed.join(' ').toLowerCase()}`);
        
        const last = parts[parts.length - 1];
        const beforeLast = parts.slice(0, -1).reverse();
        variants.push(`${last.toLowerCase()} ${beforeLast.join(' ').toLowerCase()}`);
      }
    }
    
    return [...new Set(variants)];
  };

  // Construiesc dicționarul normalizat (NU MODIFICA!)
  const DRIVER_COMPANY_MAP = {};
  Object.entries(DRIVER_COMPANY_MAP_ORIGINAL).forEach(([driver, company]) => {
    const variants = generateNameVariants(driver);
    variants.forEach(variant => {
      DRIVER_COMPANY_MAP[variant] = company;
    });
  });

  const extractAndFindDriver = (driverName) => {
    if (!driverName || typeof driverName !== 'string') {
      console.log('Driver name invalid:', driverName);
      return "Unknown";
    }
    
    const drivers = driverName.split(',').map(d => d.trim());
    
    for (const driver of drivers) {
      if (!driver) continue;
      
      const normalized = driver.toLowerCase().trim().replace(/\s+/g, ' ');
      
      if (DRIVER_COMPANY_MAP[normalized]) {
        console.log(`Driver găsit: "${driver}" -> ${DRIVER_COMPANY_MAP[normalized]}`);
        return DRIVER_COMPANY_MAP[normalized];
      }
      
      const variants = generateNameVariants(driver);
      for (const variant of variants) {
        if (DRIVER_COMPANY_MAP[variant]) {
          console.log(`Driver găsit prin variantă: "${driver}" (${variant}) -> ${DRIVER_COMPANY_MAP[variant]}`);
          return DRIVER_COMPANY_MAP[variant];
        }
      }
    }
    
    console.log(`Șofer NEGĂSIT: "${driverName}"`);
    return "Unknown";
  };

  // ===== FUNCȚII SĂPTĂMÂNI (NU MODIFICA LOGICA!) =====
  const getCurrentWeekRange = () => {
    const now = new Date();
    const startOfWeek = new Date(now);
    const day = now.getDay();
    const diff = now.getDate() - day;
    startOfWeek.setDate(diff);
    
    const endOfWeek = new Date(startOfWeek);
    endOfWeek.setDate(startOfWeek.getDate() + 6);
    
    return {
      start: startOfWeek,
      end: endOfWeek,
      label: `${startOfWeek.toLocaleDateString('ro-RO', { month: 'short', day: 'numeric' })} - ${endOfWeek.toLocaleDateString('ro-RO', { month: 'short', day: 'numeric' })}`
    };
  };

  const getWeekRangeForDate = (date) => {
    const startOfWeek = new Date(date);
    const day = date.getDay();
    const diff = date.getDate() - day;
    startOfWeek.setDate(diff);
    
    const endOfWeek = new Date(startOfWeek);
    endOfWeek.setDate(startOfWeek.getDate() + 6);
    
    return {
      start: startOfWeek,
      end: endOfWeek,
      label: `${startOfWeek.toLocaleDateString('ro-RO', { month: 'short', day: 'numeric' })} - ${endOfWeek.toLocaleDateString('ro-RO', { month: 'short', day: 'numeric' })}`
    };
  };

  const getWeekOptions = () => {
    const weeks = [];
    const currentWeek = getCurrentWeekRange();
    
    weeks.push({
      value: currentWeek.label,
      label: `Această săptămână (${currentWeek.label})`,
      start: currentWeek.start,
      end: currentWeek.end
    });
    
    for (let i = 1; i <= 8; i++) {
      const weekStart = new Date(currentWeek.start);
      weekStart.setDate(weekStart.getDate() - (i * 7));
      
      const weekEnd = new Date(weekStart);
      weekEnd.setDate(weekStart.getDate() + 6);
      
      const label = `${weekStart.toLocaleDateString('ro-RO', { month: 'short', day: 'numeric' })} - ${weekEnd.toLocaleDateString('ro-RO', { month: 'short', day: 'numeric' })}`;
      
      weeks.push({
        value: label,
        label: label,
        start: weekStart,
        end: weekEnd
      });
    }
    
    return weeks;
  };

  // ===== FUNCȚII CALENDAR (NU MODIFICA LOGICA!) =====
  const getDaysInMonth = (date) => {
    const year = date.getFullYear();
    const month = date.getMonth();
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const daysInMonth = lastDay.getDate();
    const startingDayOfWeek = firstDay.getDay();
    
    const days = [];
    
    const prevMonth = new Date(year, month - 1, 0);
    for (let i = startingDayOfWeek - 1; i >= 0; i--) {
      days.push({
        date: new Date(year, month - 1, prevMonth.getDate() - i),
        isCurrentMonth: false
      });
    }
    
    for (let day = 1; day <= daysInMonth; day++) {
      days.push({
        date: new Date(year, month, day),
        isCurrentMonth: true
      });
    }
    
    const totalCells = Math.ceil(days.length / 7) * 7;
    let nextMonthDay = 1;
    while (days.length < totalCells) {
      days.push({
        date: new Date(year, month + 1, nextMonthDay),
        isCurrentMonth: false
      });
      nextMonthDay++;
    }
    
    return days;
  };

  const selectWeekFromCalendar = (date) => {
    const weekRange = getWeekRangeForDate(date);
    setSelectedWeek(weekRange.label);
    setProcessingWeek(weekRange.label);
    setShowCalendar(false);
  };

  const isDateInSelectedWeek = (date) => {
    if (!selectedWeek && !processingWeek) return false;
    
    const weekToCheck = selectedWeek || processingWeek;
    const weekRange = getWeekRangeForDate(date);
    return weekRange.label === weekToCheck;
  };

  const canSelectDate = (date) => {
    const now = new Date();
    const twoYearsAgo = new Date(now.getFullYear() - 2, now.getMonth(), now.getDate());
    return date >= twoYearsAgo && date <= now;
  };

  // ===== PROCESAREA FIȘIERELOR (NU MODIFICA LOGICA!) =====
  const parseExcel = (arrayBuffer) => {
    try {
      const workbook = XLSX.read(arrayBuffer, { type: 'array' });
      const sheetName = workbook.SheetNames[0];
      const worksheet = workbook.Sheets[sheetName];
      const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
      
      if (jsonData.length < 2) return [];
      
      const headers = jsonData[0];
      const rows = jsonData.slice(1);
      
      return rows.map(row => {
        const obj = {};
        headers.forEach((header, index) => {
          obj[header] = row[index] || '';
        });
        return obj;
      }).filter(row => Object.values(row).some(val => val !== '' && val !== null && val !== undefined));
      
    } catch (error) {
      console.error('Eroare la parsarea Excel:', error);
      throw new Error('Nu s-a putut citi fișierul Excel');
    }
  };

  const parseCSV = (text) => {
    const lines = text.split('\n').filter(line => line.trim());
    if (lines.length < 2) return [];
    
    const headers = lines[0].split(',').map(h => h.trim().replace(/['"]/g, ''));
    
    return lines.slice(1).map(line => {
      const values = line.split(',').map(v => v.trim().replace(/['"]/g, ''));
      const row = {};
      headers.forEach((header, index) => {
        row[header] = values[index] || '';
      });
      return row;
    }).filter(row => Object.values(row).some(val => val));
  };

  const handleFileUpload = async (file, type) => {
    if (!file) return;
    
    setLoading(true);
    try {
      let data = [];
      
      if (file.name.endsWith('.csv')) {
        const text = await file.text();
        data = parseCSV(text);
      } else if (file.name.endsWith('.xlsx') || file.name.endsWith('.xls')) {
        const arrayBuffer = await file.arrayBuffer();
        data = parseExcel(arrayBuffer);
      } else {
        throw new Error('Format de fișier nesuportat. Acceptăm CSV și Excel.');
      }
      
      console.log(`Fișier ${type} încărcat:`, {
        nume: file.name,
        randuri: data.length,
        coloane: Object.keys(data[0] || {}),
        primeleRanduri: data.slice(0, 2)
      });
      
      if (type === 'trip') {
        setTripData(data);
      } else if (type === 'invoice7') {
        setInvoice7Data(data);
      } else if (type === 'invoice30') {
        setInvoice30Data(data);
      }
      
    } catch (error) {
      console.error('Eroare la încărcarea fișierului:', error);
      alert('Eroare la încărcarea fișierului: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  // ===== PROCESAREA DATELOR (NU MODIFICA LOGICA!) =====
  const processData = () => {
    if (!tripData || !invoice7Data || !invoice30Data) {
      alert('Vă rugăm să încărcați toate fișierele necesare.');
      return;
    }

    if (!processingWeek) {
      alert('Vă rugăm să selectați săptămâna pentru care procesați datele.');
      return;
    }

    setLoading(true);
    const results = {};

    try {
      const processInvoice = (invoiceData, invoiceType) => {
        invoiceData.forEach((row, index) => {
          let vrid = '';
          if (row['Tour ID'] && row['Tour ID'].trim()) {
            vrid = row['Tour ID'].trim();
          } else if (row['Load ID'] && row['Load ID'].trim()) {
            vrid = row['Load ID'].trim();
          } else {
            vrid = `UNKNOWN-${index}`;
          }

          const amount = parseFloat(row['Gross Pay Amt (Excl. Tax)'] || 0);
          if (isNaN(amount) || amount === 0) return;

          const tripRecord = tripData.find(trip => 
            trip['Trip ID'] === vrid || trip['VR ID'] === vrid
          );

          let company = 'Unmatched';
          if (tripRecord && tripRecord['Driver']) {
            const foundCompany = extractAndFindDriver(tripRecord['Driver']);
            if (foundCompany !== 'Unknown') {
              company = foundCompany;
            } else {
              console.log(`VRID ${vrid} - Șofer negăsit: "${tripRecord['Driver']}"`);
            }
          } else {
            console.log(`VRID ${vrid} - Nu s-a găsit în trip data sau nu are driver`);
          }

          if (!results[company]) {
            results[company] = {
              Total_7_days: 0,
              Total_30_days: 0,
              Total_comision: 0,
              VRID_details: {}
            };
          }

          const commissionRate = company === "Fast Express" ? 0.02 : 0.04;
          const commission = amount * commissionRate;

          if (invoiceType === '7_days') {
            results[company].Total_7_days += amount;
          } else {
            results[company].Total_30_days += amount;
          }
          
          results[company].Total_comision += commission;

          if (!results[company].VRID_details[vrid]) {
            results[company].VRID_details[vrid] = {
              '7_days': 0,
              '30_days': 0,
              'commission': 0
            };
          }

          results[company].VRID_details[vrid][invoiceType] = amount;
          results[company].VRID_details[vrid].commission += commission;
        });
      };

      processInvoice(invoice7Data, '7_days');
      processInvoice(invoice30Data, '30_days');

      setProcessedData(results);
      setSelectedWeek(processingWeek);
      setActiveTab('calculations');

    } catch (error) {
      alert('Eroare la procesarea datelor: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  // ===== EVIDENȚA PLĂȚILOR (NU MODIFICA LOGICA!) =====
  const recordPayment = (company, amount, description = '') => {
    const currentWeek = selectedWeek || getCurrentWeekRange().label;
    
    const payment = {
      id: Date.now(),
      company,
      amount: parseFloat(amount),
      description,
      date: new Date().toISOString().split('T')[0],
      week: currentWeek
    };

    setPaymentHistory(prev => [payment, ...prev]);
    setPayments(prev => ({
      ...prev,
      [company]: (prev[company] || 0) + payment.amount
    }));
  };

  const deletePayment = (paymentId) => {
    const payment = paymentHistory.find(p => p.id === paymentId);
    if (!payment) return;

    setPaymentHistory(prev => prev.filter(p => p.id !== paymentId));
    setPayments(prev => ({
      ...prev,
      [payment.company]: Math.max(0, (prev[payment.company] || 0) - payment.amount)
    }));
  };

  const getRemainingPayment = (company) => {
    const data = processedData[company];
    if (!data) return 0;

    const total = data.Total_7_days + data.Total_30_days - data.Total_comision;
    const paid = payments[company] || 0;
    
    return Math.max(0, total - paid);
  };

  // ===== RENDER (ÎMBUNĂTĂȚEȘTE DOAR UI/UX, NU LOGICA!) =====
  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            Sistem Transport cu Evidența Plăților
          </h1>
          <p className="text-gray-600">
            Calculează facturi și urmărește plățile către companiile de transport
          </p>
        </div>

        {/* Tabs */}
        <div className="bg-white rounded-lg shadow-sm mb-6">
          <div className="border-b border-gray-200">
            <nav className="flex space-x-8 px-6">
              {[
                { id: 'upload', label: 'Încărcare Date', icon: Upload },
                { id: 'calculations', label: 'Calcule și Totale', icon: Calculator },
                { id: 'payments', label: 'Evidența Plăților', icon: DollarSign }
              ].map(tab => {
                const Icon = tab.icon;
                return (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`py-4 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${
                      activeTab === tab.id
                        ? 'border-blue-500 text-blue-600'
                        : 'border-transparent text-gray-500 hover:text-gray-700'
                    }`}
                  >
                    <Icon size={16} />
                    <span>{tab.label}</span>
                  </button>
                );
              })}
            </nav>
          </div>

          <div className="p-6">
            {/* TAB: Încărcare Date */}
            {activeTab === 'upload' && (
              <div className="space-y-6">
                <div className="flex justify-between items-center">
                  <h2 className="text-xl font-semibold text-gray-900">Încărcați Fișierele</h2>
                  
                  <div className="flex items-center space-x-2">
                    <label className="text-sm font-medium text-gray-700">Săptămâna procesată:</label>
                    <select 
                      value={processingWeek}
                      onChange={(e) => setProcessingWeek(e.target.value)}
                      className="px-3 py-1 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="">Selectează săptămâna</option>
                      {getWeekOptions().map(week => (
                        <option key={week.value} value={week.value}>{week.label}</option>
                      ))}
                    </select>
                    <button
                      onClick={() => setShowCalendar(!showCalendar)}
                      className="px-3 py-1 bg-gray-100 border border-gray-300 rounded-md text-sm hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      📅 Calendar
                    </button>
                  </div>
                </div>

                {processingWeek && (
                  <div className="bg-green-50 border border-green-200 rounded-lg p-3">
                    <p className="text-green-800 text-sm">
                      📅 Procesați datele pentru săptămâna: <strong>{processingWeek}</strong>
                    </p>
                  </div>
                )}

                {/* Calendar Modal */}
                {showCalendar && (
                  <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
                      <div className="flex justify-between items-center mb-4">
                        <h3 className="text-lg font-semibold">Selectează Săptămâna</h3>
                        <button
                          onClick={() => setShowCalendar(false)}
                          className="text-gray-400 hover:text-gray-600"
                        >
                          ✕
                        </button>
                      </div>
                      
                      <div className="flex justify-between items-center mb-4">
                        <button
                          onClick={() => setCalendarDate(new Date(calendarDate.getFullYear(), calendarDate.getMonth() - 1))}
                          className="px-3 py-1 text-gray-600 hover:bg-gray-100 rounded"
                        >
                          ‹
                        </button>
                        <h4 className="text-lg font-medium">
                          {calendarDate.toLocaleDateString('ro-RO', { month: 'long', year: 'numeric' })}
                        </h4>
                        <button
                          onClick={() => setCalendarDate(new Date(calendarDate.getFullYear(), calendarDate.getMonth() + 1))}
                          className="px-3 py-1 text-gray-600 hover:bg-gray-100 rounded"
                        >
                          ›
                        </button>
                      </div>

                      <div className="grid grid-cols-7 gap-1 mb-4">
                        {['D', 'L', 'M', 'M', 'J', 'V', 'S'].map(day => (
                          <div key={day} className="text-center text-sm font-medium text-gray-500 py-2">
                            {day}
                          </div>
                        ))}
                        
                        {getDaysInMonth(calendarDate).map((day, index) => {
                          const isSelectable = canSelectDate(day.date);
                          const isInSelectedWeek = isDateInSelectedWeek(day.date);
                          
                          return (
                            <button
                              key={index}
                              onClick={() => isSelectable && selectWeekFromCalendar(day.date)}
                              disabled={!isSelectable}
                              className={`text-center py-2 text-sm rounded transition-colors ${
                                !day.isCurrentMonth 
                                  ? 'text-gray-300'
                                  : !isSelectable
                                  ? 'text-gray-300 cursor-not-allowed'
                                  : isInSelectedWeek
                                  ? 'bg-blue-500 text-white'
                                  : 'text-gray-700 hover:bg-blue-100 cursor-pointer'
                              }`}
                            >
                              {day.date.getDate()}
                            </button>
                          );
                        })}
                      </div>

                      <div className="text-xs text-gray-500 text-center">
                        Poți selecta săptămâni din ultimii 2 ani. Săptămâna începe duminica.
                      </div>
                    </div>
                  </div>
                )}
                
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  {/* File upload areas */}
                  {[
                    { type: 'trip', label: 'Fișier TRIP', desc: 'CSV cu datele curselor', accept: '.csv', data: tripData, ref: tripFileRef },
                    { type: 'invoice7', label: 'Factură 7 Zile', desc: 'Excel/CSV cu plățile pe termen scurt', accept: '.csv,.xlsx,.xls', data: invoice7Data, ref: invoice7FileRef },
                    { type: 'invoice30', label: 'Factură 30 Zile', desc: 'Excel/CSV cu plățile pe termen lung', accept: '.csv,.xlsx,.xls', data: invoice30Data, ref: invoice30FileRef }
                  ].map(item => (
                    <div key={item.type} className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                      <Upload className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                      <h3 className="text-lg font-medium text-gray-900 mb-2">{item.label}</h3>
                      <p className="text-sm text-gray-500 mb-4">{item.desc}</p>
                      <input
                        ref={item.ref}
                        type="file"
                        accept={item.accept}
                        onChange={(e) => handleFileUpload(e.target.files[0], item.type)}
                        className="hidden"
                      />
                      <button
                        onClick={() => item.ref.current?.click()}
                        className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md"
                      >
                        Selectați Fișier
                      </button>
                      {item.data && (
                        <div className="mt-2 flex items-center justify-center text-green-600">
                          <Check size={16} className="mr-1" />
                          <span className="text-sm">Încărcat</span>
                        </div>
                      )}
                    </div>
                  ))}
                </div>

                {/* Process button logic */}
                {tripData && invoice7Data && invoice30Data && processingWeek && (
                  <div className="text-center">
                    <button
                      onClick={processData}
                      disabled={loading}
                      className="bg-green-500 hover:bg-green-600 text-white px-8 py-3 rounded-md font-medium disabled:opacity-50"
                    >
                    </button>
                  </div>
                )}

                {tripData && invoice7Data && invoice30Data && !processingWeek && (
                  <div className="text-center">
                    <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4">
                      <p className="text-yellow-800 text-sm">
                        ⚠️ Selectați săptămâna pentru care procesați datele înainte de a continua
                      </p>
                    </div>
                    <button
                      disabled
                      className="bg-gray-400 text-white px-8 py-3 rounded-md font-medium cursor-not-allowed"
                    >
                      Selectați săptămâna mai întâi
                    </button>
                  </div>
                )}
              </div>
            )}

            {/* TAB: Calcule și Totale */}
            {activeTab === 'calculations' && (
              <div className="space-y-6">
                <div className="flex justify-between items-center">
                  <h2 className="text-xl font-semibold text-gray-900">Calcule și Totale</h2>
                  {processingWeek && (
                    <div className="bg-blue-50 border border-blue-200 rounded-lg px-3 py-2">
                      <p className="text-blue-800 text-sm">
                        📊 Date procesate pentru: <strong>{processingWeek}</strong>
                      </p>
                    </div>
                  )}
                </div>
                
                {Object.keys(processedData).length === 0 ? (
                  <div className="text-center text-gray-500 py-8">
                    Încărcați și procesați datele pentru a vedea calculele
                  </div>
                ) : (
                  <div className="overflow-x-auto">
                    <table className="min-w-full bg-white border border-gray-200 rounded-lg">
                      <thead className="bg-gray-50">
                        <tr>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Companie</th>
                          <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">7 Zile</th>
                          <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">30 Zile</th>
                          <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">Comision</th>
                          <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">Total de Plată</th>
                          <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">Achitat</th>
                          <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase">Rest de Plată</th>
                        </tr>
                      </thead>
                      <tbody className="divide-y divide-gray-200">
                        {Object.entries(processedData).map(([company, data]) => {
                          const total = data.Total_7_days + data.Total_30_days - data.Total_comision;
                          const paid = payments[company] || 0;
                          const remaining = Math.max(0, total - paid);
                          
                          return (
                            <tr key={company} className="hover:bg-gray-50">
                              <td className="px-6 py-4 text-sm font-medium text-gray-900">{company}</td>
                              <td className="px-6 py-4 text-sm text-gray-900 text-right">€{data.Total_7_days.toFixed(2)}</td>
                              <td className="px-6 py-4 text-sm text-gray-900 text-right">€{data.Total_30_days.toFixed(2)}</td>
                              <td className="px-6 py-4 text-sm text-red-600 text-right">-€{data.Total_comision.toFixed(2)}</td>
                              <td className="px-6 py-4 text-sm font-semibold text-blue-600 text-right">€{total.toFixed(2)}</td>
                              <td className="px-6 py-4 text-sm text-green-600 text-right">€{paid.toFixed(2)}</td>
                              <td className="px-6 py-4 text-sm font-semibold text-right">
                                <span className={remaining === 0 ? 'text-green-600' : 'text-red-600'}>
                                  €{remaining.toFixed(2)}
                                </span>
                              </td>
                            </tr>
                          );
                        })}
                      </tbody>
                    </table>
                  </div>
                )}
              </div>
            )}

            {/* TAB: Evidența Plăților */}
            {activeTab === 'payments' && (
              <div className="space-y-6">
                <div className="flex justify-between items-center">
                  <h2 className="text-xl font-semibold text-gray-900">Evidența Plăților</h2>
                  
                  <div className="flex items-center space-x-2">
                    <label className="text-sm font-medium text-gray-700">Perioada plăților:</label>
                    <select 
                      value={selectedWeek}
                      onChange={(e) => setSelectedWeek(e.target.value)}
                      className="px-3 py-1 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      <option value="">Selectează săptămâna</option>
                      {getWeekOptions().map(week => (
                        <option key={week.value} value={week.value}>{week.label}</option>
                      ))}
                    </select>
                    <button
                      onClick={() => setShowCalendar(!showCalendar)}
                      className="px-3 py-1 bg-gray-100 border border-gray-300 rounded-md text-sm hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    >
                      📅 Calendar
                    </button>
                    {processingWeek && selectedWeek !== processingWeek && (
                      <button
                        onClick={() => setSelectedWeek(processingWeek)}
                        className="text-xs bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600"
                      >
                        Folosește {processingWeek}
                      </button>
                    )}
                  </div>
                </div>

                {selectedWeek && (
                  <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                    <p className="text-blue-800 text-sm">
                      📅 Evidența plăților pentru: <strong>{selectedWeek}</strong>
                      {processingWeek && selectedWeek === processingWeek && (
                        <span className="ml-2 text-green-600">✓ (aceeași cu datele procesate)</span>
                      )}
                    </p>
                  </div>
                )}
                
                {Object.keys(processedData).length === 0 ? (
                  <div className="text-center text-gray-500 py-8">
                    Procesați datele pentru a putea înregistra plățile
                  </div>
                ) : (
                  <div className="space-y-4">
                    {Object.entries(processedData).map(([company, data]) => {
                      const total = data.Total_7_days + data.Total_30_days - data.Total_comision;
                      const paid = payments[company] || 0;
                      const remaining = getRemainingPayment(company);
                      
                      return (
                        <div key={company} className="bg-white border border-gray-200 rounded-lg p-6">
                          <div className="flex justify-between items-start mb-4">
                            <div>
                              <h3 className="text-lg font-semibold text-gray-900">{company}</h3>
                              {selectedWeek && (
                                <p className="text-sm text-gray-500">Săptămâna: {selectedWeek}</p>
                              )}
                            </div>
                            <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                              remaining === 0 ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
                            }`}>
                              {remaining === 0 ? 'Achitat Complet' : `Rest: €${remaining.toFixed(2)}`}
                            </span>
                          </div>
                          
                          <div className="grid grid-cols-2 md:grid-cols-5 gap-4 mb-4">
                            <div>
                              <label className="block text-sm font-medium text-gray-700">Plată 7 zile</label>
                              <div className="text-lg font-semibold text-blue-600">€{data.Total_7_days.toFixed(2)}</div>
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700">Plată 30 zile</label>
                              <div className="text-lg font-semibold text-purple-600">€{data.Total_30_days.toFixed(2)}</div>
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700">Comision</label>
                              <div className="text-lg font-semibold text-red-600">-€{data.Total_comision.toFixed(2)}</div>
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700">Total de plată</label>
                              <div className="text-lg font-semibold text-gray-900">€{total.toFixed(2)}</div>
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700">Rest de plată</label>
                              <div className="text-lg font-semibold text-orange-600">€{remaining.toFixed(2)}</div>
                            </div>
                          </div>
                          
                          <div className="mb-4">
                            <div className="flex justify-between text-sm text-gray-600 mb-1">
                              <span>Progres plată</span>
                              <span>{total > 0 ? Math.round((paid / total) * 100) : 0}%</span>
                            </div>
                            <div className="w-full bg-gray-200 rounded-full h-2">
                              <div 
                                className="bg-green-500 h-2 rounded-full transition-all duration-300" 
                                style={{ width: `${total > 0 ? Math.min((paid / total) * 100, 100) : 0}%` }}
                              ></div>
                            </div>
                          </div>
                          
                          <div className="flex items-end space-x-4">
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">Sumă plătită</label>
                              <input
                                type="number"
                                placeholder="0.00"
                                className="w-32 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                id={`payment-${company}`}
                                step="0.01"
                              />
                            </div>
                            <div>
                              <label className="block text-sm font-medium text-gray-700 mb-1">Descriere</label>
                              <input
                                type="text"
                                placeholder="Ex: Plata 7 zile"
                                className="w-40 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                                id={`description-${company}`}
                              />
                            </div>
                            <button
                              onClick={() => {
                                if (!selectedWeek) {
                                  alert('Vă rugăm să selectați o săptămână mai întâi!');
                                  return;
                                }
                                
                                const amountInput = document.getElementById(`payment-${company}`);
                                const descInput = document.getElementById(`description-${company}`);
                                const amount = parseFloat(amountInput.value);
                                
                                if (amount > 0) {
                                  recordPayment(company, amount, descInput.value);
                                  amountInput.value = '';
                                  descInput.value = '';
                                }
                              }}
                              className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md flex items-center space-x-2"
                            >
                              <Plus size={16} />
                              <span>Înregistrează</span>
                            </button>
                          </div>

                          {paymentHistory.filter(p => p.company === company && (!selectedWeek || p.week === selectedWeek)).length > 0 && (
                            <div className="mt-4">
                              <h4 className="text-sm font-medium text-gray-700 mb-2">
                                Istoric plăți {selectedWeek ? `(${selectedWeek})` : ''}:
                              </h4>
                              <div className="space-y-1">
                                {paymentHistory
                                  .filter(p => p.company === company && (!selectedWeek || p.week === selectedWeek))
                                  .map(payment => (
                                  <div key={payment.id} className="text-sm text-gray-600 flex justify-between items-center bg-gray-50 p-2 rounded">
                                    <span>{payment.date} - {payment.description || 'Plată'}</span>
                                    <div className="flex items-center space-x-2">
                                      <span className="font-medium text-green-600">€{payment.amount.toFixed(2)}</span>
                                      <button
                                        onClick={() => deletePayment(payment.id)}
                                        className="text-red-600 hover:text-red-800"
                                      >
                                        <Trash2 size={14} />
                                      </button>
                                    </div>
                                  </div>
                                ))}
                              </div>
                            </div>
                          )}
                        </div>
                      );
                    })}
                  </div>
                )}
              </div>
            )}
          </div>
        </div>

        {/* Loading Overlay */}
        {loading && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white p-6 rounded-lg">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto"></div>
              <p className="mt-4 text-gray-600">Se procesează...</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default TransportPaymentApp;

/*
===== INSTRUCȚIUNI PENTRU REPLIT =====

CERINȚE DE ÎMBUNĂTĂȚIRE UI/UX:

1. **DESIGN MODERN & PROFESIONAL**
   - Implementează dark mode toggle
   - Folosește gradienți vibrante și culori moderne
   - Adaugă glassmorphism effects
   - Typography expresivă și bold

2. **ANIMAȚII & MICRO-INTERACȚIUNI**
   - Smooth transitions între tabs
   - Hover effects pe toate elementele interactive
   - Loading animations moderne (nu doar spinner-ul basic)
   - Fade in/out pentru modaluri
   - Progress animations pentru progres bar

3. **COMPONENTE INTERACTIVE**
   - Drag & drop pentru încărcarea fișierelor
   - Toast notifications pentru acțiuni
   - Tooltip-uri informative
   - Skeleton loading pentru tabele
   - Auto-save indicators

4. **LAYOUT & RESPONSIVENESS**
   - Mobile-first approach
   - Grid layouts moderne
   - Card-based design
   - Sticky headers pentru tabele lungi
   - Collapsible sidebar pentru mobile

5. **TEHNOLOGII MODERNE DE FOLOSIT**
   - Framer Motion pentru animații
   - React Spring pentru micro-animații
   - CSS-in-JS (styled-components sau emotion)
   - React Query pentru state management
   - React Hook Form pentru forms

6. **FEATURES AVANSATE**
   - Search & filter în tabele
   - Export la Excel/PDF cu stil modern
   - Print-friendly layouts
   - Keyboard shortcuts
   - Auto-complete în input-uri

IMPORTANT: 
- NU MODIFICA LOGICA EXISTENTĂ!
- PĂSTREAZĂ TOATE FUNCȚIONALITĂȚILE!
- DOAR ÎMBUNĂTĂȚEȘTE UI/UX-ul!
- TESTEAZĂ TOATE FEATURES-URILE DUPĂ MODIFICĂRI!

Goal: Creează o aplicație care să facă utilizatorii să spună "WOW!"
*/