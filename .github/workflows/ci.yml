name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run type check
      run: npm run type-check
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests
      run: npm run test:coverage
      env:
        DATABASE_URL: postgresql://postgres:password@localhost:5432/test_db
        SECONDARY_DATABASE_URL: postgresql://postgres:password@localhost:5432/test_admin_db
        NODE_ENV: test
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        SECONDARY_DATABASE_URL: ${{ secrets.SECONDARY_DATABASE_URL }}
    
    - name: Build Docker image
      run: docker build -t spectra-logistics:${{ github.sha }} .
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Push Docker image
      run: |
        docker tag spectra-logistics:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/spectra-logistics:latest
        docker tag spectra-logistics:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/spectra-logistics:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/spectra-logistics:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/spectra-logistics:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production..."
        # Aici ar trebui să adaugi logica de deployment
        # De exemplu, pentru Kubernetes, AWS, etc.
    
    - name: Notify deployment
      run: |
        echo "Deployment completed successfully!"
        # Aici poți adăuga notificări (Slack, Discord, etc.)
